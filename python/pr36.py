from typing import List

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        r = {}
        c = {}
        s = {}
        sq = 0
        
        for i,row in enumerate(board):
            r[i] = set()
            for j,col in enumerate(row):
                sq = 3 * (i // 3) + j // 3
                if i == 0:
                    c[j] = set()
                
                if col != '.':
                    ci = int(col)
                    if ci in r[i]:
                        return False
                    else:
                        r[i].add(ci)
                    if ci in c[j]:
                        return False
                    else:
                        c[j].add(ci)
                    if s.get(sq):
                        if ci in s[sq]:
                            return False
                        else:
                            s[sq].add(ci)
                    else:
                        s[sq] = set()
                        s[sq].add(ci)
                        
        return True

sol = Solution()
# board = [["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
board = [[".",".",".",".","5",".",".","1","."],[".","4",".","3",".",".",".",".","."],[".",".",".",".",".","3",".",".","1"],["8",".",".",".",".",".",".","2","."],[".",".","2",".","7",".",".",".","."],[".","1","5",".",".",".",".",".","."],[".",".",".",".",".","2",".",".","."],[".","2",".","9",".",".",".",".","."],[".",".","4",".",".",".",".",".","."]]
print(sol.isValidSudoku(board))